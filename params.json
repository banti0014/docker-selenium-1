{
  "name": "Docker-Selenium",
  "tagline": "Selenium in Docker with Chrome & Firefox plus video recording support - By Leo Gallucci",
  "body": "<img id=\"header\" width=\"760\" src=\"./images/icons/logo_wide.jpg\" />\r\n# Selenium in Docker with Chrome and Firefox\r\n\r\n[![Build Status](https://travis-ci.org/elgalu/docker-selenium.svg?branch=master)](https://travis-ci.org/elgalu/docker-selenium)\r\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/elgalu/docker-selenium?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n* selenium server grid with 2 nodes (chrome & firefox)\r\n* mkv video recording\r\n* VNC access (useful for debugging the container)\r\n* google-chrome-stable\r\n* google-chrome-beta: no longer provided but [can still be found here][2.47.1m]\r\n* google-chrome-unstable: no longer provided but [can still be found here][2.47.1m]\r\n* firefox stable latest\r\n* firefox stable [last 18 versions can be found here][2.47.1m]\r\n* fluxbox or openbox (lightweight window managers)\r\n\r\n![docker-selenium-grid](./images/grid_console.png)\r\n\r\n<h2 id=\"official\">Official repo</h2>\r\n\r\nNote [SeleniumHQ/docker-selenium](https://github.com/SeleniumHQ/docker-selenium) project is more useful for building selenium grids while this one focuses on building disposable standalone seleniums with [video recording support](./docs/videos.md) and both browsers on the same container. It also adds some other features like [customizing the screen size](#screen-size) and [ssh access](#ssh) that can be particularly useful for tunneling support.\r\n\r\n### Purpose\r\nThe purpose of this project is to have [Selenium][] running as simple and as fast as possible.\r\n\r\n### Alternatives\r\nIf you don't require a real browser [PhantomJS](https://github.com/ariya/phantomjs) might be enough for you.\r\n[Electron](https://wallabyjs.com/docs/integration/electron.html) allows to use the latest Chromium/V8 which might be equivalent to running in Chrome however I haven't looked into that yet. You can also use a paid service like [Sauce Labs][sauce] or [BrowserStack][], note they offer free open source accounts and straightforward [integration with Travis CI](https://docs.travis-ci.com/user/sauce-connect/).\r\nYou can also configure [xvfb](https://docs.travis-ci.com/user/gui-and-headless-browsers/#Using-xvfb-to-Run-Tests-That-Require-a-GUI) yourself but it involves some manual steps and doesn't include video recording, nor does PhantomJS nor Electron.\r\n\r\n### Usage\r\n\r\n<h4 id=\"run\"><img width=\"24\" src=\"./images/icons/logo.png\" /> Run</h4>\r\n\r\n1. Pull the image and run the container\r\n\r\n        docker pull elgalu/selenium:2.53.0o\r\n\r\n        docker run --rm -ti --name=grid -p 4444:24444 -p 5900:25900 \\\r\n            -v /dev/shm:/dev/shm -e VNC_PASSWORD=hola elgalu/selenium:2.53.0o\r\n\r\n2. Wait until the grid starts properly before starting the tests _(Optional but recommended)_\r\n\r\n        docker exec grid wait_all_done 30s\r\n\r\nAfter this, [Selenium][] should be up and running at `http://localhost:4444/wd/hub`. Open the url in your browser to confirm it is running.\r\nIf you are using Mac (OSX) or [Microsoft Windows](https://docs.docker.com/engine/installation/windows/) `localhost` won't work! Find out the correct IP through `boot2docker ip` or `docker-machine ip default`.\r\n\r\n**Notes:**\r\n * Add `sudo` only if needed in your environment\r\n * Add `--privileged` or `-v /dev/shm:/dev/shm` if you really need it. For example when [Chrome crashes](https://github.com/elgalu/docker-selenium/issues/20) during your high gpu intensive tests.\r\n\r\n#### Stop\r\nShutdown gracefully\r\n\r\n    docker exec grid stop\r\n    docker stop grid\r\n\r\n### Parallel\r\nThis image is designed to run one test on each docker container but if you still want to run multiple tests in parallel on the same container you can still do so by increasing `MAX_INSTANCES` and `MAX_SESSIONS` which now [defaults](https://github.com/elgalu/docker-selenium/blob/2.53.0k/Dockerfile#L949) to 1.\r\n\r\n        docker run --rm -ti --name=grid -p 4444:24444 -p 5900:25900 \\\r\n            -v /dev/shm:/dev/shm -e VNC_PASSWORD=hola \\\r\n            -e MAX_INSTANCES=20 -e MAX_SESSIONS=20 \\\r\n            elgalu/selenium:2.53.0o\r\n\r\nThe drawback is that all tests will run on the same desktop meaning the video recording will only capture the browser in the foreground but it's in the roadmap to make all this transparent, see issues [#78](https://github.com/elgalu/docker-selenium/issues/78) and [#77](https://github.com/elgalu/docker-selenium/issues/77).\r\n\r\nAnother problem with increasing `MAX_INSTANCES` & `MAX_SESSIONS` is focus issues. So if you don't need video recording you can use the official docker selenium grid to scale up/down via docker-compose, see for example [this blog post](http://carlosbecker.com/posts/selenium-grid-docker-compose)\r\n\r\n### OSX\r\nIf you are in Mac, you need to get the correct IP of the docker machine. One of these two commands should work to get it:\r\n\r\n    docker-machine ip default\r\n\r\nor former:\r\n\r\n    boot2docker ip\r\n\r\n### SSH\r\n\r\nYou can also ssh into the machine as long as `SSH_AUTH_KEYS=\"$(cat ~/.ssh/id_rsa.pub)\"` is correct.\r\n\r\n    docker run --rm -ti --name=grid -p=4444:24444 -p=5900:25900 -p=22222:22222 \\\r\n      -e SSHD=true \\\r\n      -e SSH_AUTH_KEYS=\"$(cat ~/.ssh/id_rsa.pub)\" \\\r\n      -v /dev/shm:/dev/shm elgalu/selenium:2.53.0o\r\n\r\nThen\r\n\r\n    ssh -p 22222 -o StrictHostKeyChecking=no application@localhost\r\n\r\nInclude `-X` in ssh command if you want to redirect the started GUI programs to your host, but for that you also need to pass `-e SSHD_X11FORWARDING=yes`\r\n\r\n    docker run --rm -ti --name=grid -p=4444:24444 -p=5900:25900 -p=22222:22222 \\\r\n      -e SSHD=true -e SSHD_X11FORWARDING=yes \\\r\n      -e SSH_AUTH_KEYS=\"$(cat ~/.ssh/id_rsa.pub)\" \\\r\n      -v /dev/shm:/dev/shm elgalu/selenium:2.53.0o\r\n\r\nThen\r\n\r\n    ssh -X -p 22222 -o StrictHostKeyChecking=no application@localhost\r\n    echo $DISPLAY #=> localhost:10.0\r\n\r\nThat's is useful for tunneling, or else you can stick with `docker exec` to get into the instance with a shell:\r\n\r\n    docker exec -ti grid bash\r\n\r\nSupervisor exposes an http server but is not enough to bind the ports via `docker run -p`, so in this case you need to FWD ports with `ssh -L`\r\n\r\n    ssh -p 22222 -o StrictHostKeyChecking=no -L localhost:29001:localhost:29001 application@localhost\r\n\r\n### Screen size\r\nYou can set a custom screen size at docker run time by providing `SCREEN_WIDTH` and `SCREEN_HEIGHT` environment variables:\r\n\r\n    docker pull elgalu/selenium:2.53.0o\r\n\r\n    docker run -d --name=grid -p 4444:24444 -p 5900:25900 \\\r\n      -v /dev/shm:/dev/shm -e VNC_PASSWORD=hola \\\r\n      -e SCREEN_WIDTH=1920 -e SCREEN_HEIGHT=1480 \\\r\n      elgalu/selenium:2.53.0o\r\n\r\n    docker exec grid wait_all_done 10s\r\n\r\n    open vnc://:hola@localhost:5900\r\n\r\n### Chrome flavor\r\n\r\nThis feature was available in previous versions, please go to [2.47.1m] to use it.\r\n\r\nTo configure which Chrome flavor you want to use (stable, beta, unstable), just pass `-e CHROME_FLAVOR=beta` to `docker run`. Default is `stable`.\r\n\r\n### Firefox version\r\n\r\nThis feature was available in previous versions, please go to [2.47.1m] to use it.\r\nTo configure which Firefox version to use, first check available versions in the [CHANGELOG](./CHANGELOG.md). Then pass `-e FIREFOX_VERSION=38.0.6` to `docker run`. Default is the latest number of the available list.\r\n\r\n<h3 id=\"video\">Record Videos</h3>\r\n\r\nStep by step guide at [docs/videos.md](./docs/videos.md)\r\n\r\nIf you create the container with `-e VIDEO=true` it will start recording a video through the vnc connection run upon start.\r\nIt is recommended to create first a local folder `videos` in your current directory, and mount the videos directory for\r\nan easy transfer with `-v $(pwd)/videos:/videos`.\r\n\r\nOnce your tests are done you can either manually stop the recording via `docker exec grid /bin-utils/stop-video` where\r\n*grid* is just the arbitrary container chosen name in `docker run` command. Or simply stop the container and that will stop the video recording automatically.\r\n\r\nRelevant environment variables to customize it are:\r\n\r\n    FFMPEG_FRAME_RATE=25\r\n    VIDEO_FILE_NAME=\"test\"\r\n    VIDEO_FILE_EXTENSION=mkv\r\n    FFMPEG_CODEC_ARGS=\"\"\r\n\r\nIt is important to note that `ffmpeg` video recording takes an important amount of CPU usage, even more when a well compressed format like *mkv* is selected. You may want to delegate video recording through `vnc2swf-start.sh` to a separate server process and even delegate compression to a further step or to a cloud service like YouTube.\r\n\r\n### VNC\r\n\r\nWhen you don't specify a VNC password, a random one will be generated. That password can be seeing by grepping the logs:\r\n\r\n    docker exec grid wait_all_done 30s\r\n    #=> ... a VNC password was generated for you: ooGhai0aesaesh\r\n\r\nYou can connect to see what's happening\r\n\r\n    open vnc://:ooGhai0aesaesh@localhost:5900\r\n\r\n### noVNC\r\n\r\nDisabled by default, [noVNC](https://github.com/kanaka/noVNC) provides a browser VNC client so you don't need to install a vnc viewer if you choose so. *Note:* we were using guacamole before.\r\n\r\nSafari Browser already comes with a built-in vnc viewer so this feature is overkill and is disabled by default, just navigate to vnc://localhost:5900 in your Safari browser.\r\n\r\nYou need to pass the environment variable `-e NOVNC=true` in order to start the noVNC service and you will be able to open a browser at [localhost:6080](http://localhost:6080/vnc.html)\r\n\r\n    docker run --rm -ti --name=grid -p 4444:24444 -p 5900:25900 \\\r\n      -v /dev/shm:/dev/shm -p 6080:26080 -e NOVNC=true \\\r\n      elgalu/selenium:2.53.0o\r\n\r\nIf the VNC password was randomly generated find out with\r\n\r\n    docker exec grid wait_all_done 30s\r\n    #=> ... a VNC password was generated for you: ooGhai0aesaesh\r\n\r\n## Issues with Chrome\r\n\r\n### Chrome crashed\r\n\r\nIf your tests crashes in Chrome you may need to increase shm size or simply start your container by sharing `-v /dev/shm:/dev/shm`\r\n\r\n    docker run ... -v /dev/shm:/dev/shm\r\n\r\nAlternatively you can increase it inside the container:\r\n\r\n1. start docker in privileged mode: `docker run --privileged`\r\n2. increase shm size from default 64mb to something bigger:\r\n\r\n```sh\r\ndocker exec grid sudo umount /dev/shm\r\ndocker exec grid sudo mount -t tmpfs -o rw,nosuid,nodev,noexec,relatime,size=512M tmpfs /dev/shm\r\n```\r\n\r\n### Chrome not reachable or timeout after 60 secs\r\nIn CentOS and apparently since docker 1.10.0 is necessary to disable [sandbox mode](http://www.chromium.org/developers/design-documents/sandbox) through [--no-sandbox](http://peter.sh/experiments/chromium-command-line-switches/#no-sandbox) example client implementation.\r\n\r\nThe error comes along with this message while starting Chrome:\r\n\r\n> Failed to move to new namespace: PID namespaces supported. Network namespace supported, but failed: errno = Operation not permitted\r\n\r\n#### No Sandbox\r\n\r\n    ChromeOptions options = new ChromeOptions();\r\n    options.addArguments(\"--no-sandbox\");\r\n\r\nIn Protrator\r\n\r\n    capabilities: {\r\n      browserName: 'chrome',\r\n      chromeOptions: {\r\n        args: ['--no-sandbox'],\r\n      },\r\n    },\r\n\r\nHowever this is now the default of this image, see `CHROME_ARGS=\"--no-sandbox\"` in the Dockerfile so don't be surprised to see the \"Stability and security will suffer\" banner when opening Chrome inside the container.\r\n\r\n## Security\r\n\r\nThe docker images are built and pushed from [TravisCI](https://travis-ci.org/elgalu/docker-selenium/builds/123103275) for full traceability.\r\n\r\nDo **NOT** expose your selenium grid to the outside world (e.g. in AWS), because Selenium does not provide auth. Therefore, if the ports are not firewalled malicious users will use [your selenium grid as a bot net](https://github.com/SeleniumHQ/docker-selenium/issues/147).\r\n\r\nPut that firewall stuff aside, a file [scm-source.json](./scm-source.json) is included at the root directory of the generated image with information that helps to comply with auditing requirements to trace the creation of this docker image.\r\n\r\nNote [scm-source.json](./scm-source.json) file will always be 1 commit outdated in the repo but will be correct inside the container.\r\n\r\nThis is how the file looks like:\r\n\r\n```\r\ncat scm-source.json #=> { \"url\": \"https://github.com/elgalu/docker-selenium\",\r\n                          \"revision\": \"8d2e03d8b4c45c72e0c73481d5141850d54122fe\",\r\n                          \"author\": \"lgallucci\",\r\n                          \"status\": \"\" }\r\n```\r\n\r\nThere are also additional steps you can take to ensure you're using the correct image:\r\n\r\n### Option 1 - Check the Full Image Id\r\n\r\nYou can simply verify that image id is indeed the correct one.\r\n\r\n    # e.g. full image id for tag 2.53.0o\r\n    export IMGID=\"<<Please see CHANGELOG.md>>\"\r\n    if docker inspect -f='{{.Id}}' elgalu/selenium:2.53.0o |grep ${IMGID} &> /dev/null; then\r\n        echo \"Image ID tested ok\"\r\n    else\r\n        echo \"Image ID doesn't match\"\r\n    fi\r\n\r\n### Option 2 - Use immutable image digests\r\n\r\nGiven docker.io currently allows to push the same tag image twice this represent a security concern but since docker >= 1.6.2 is possible to fetch the digest sha256 instead of the tag so you can be sure you're using the exact same docker image every time:\r\n\r\n    # e.g. sha256 for tag 2.53.0o\r\n    export SHA=<<Please see CHANGELOG.md>>\r\n    docker pull elgalu/selenium@sha256:${SHA}\r\n\r\nYou can find all digests sha256 and image ids per tag in the [CHANGELOG](./CHANGELOG.md) so as of now you just need to trust the sha256 in the CHANGELOG. Bullet proof is to fork this project and build the images yourself if security is a big concern.\r\n\r\n## Cloud Testing Platforms\r\n\r\n### Sauce Labs\r\nTo open the [Sauce Labs][] tunnel while starting the docker container pass in the arguments `-e SAUCE_TUNNEL=true -e SAUCE_USER_NAME=leo -e SAUCE_API_KEY=secret` that will also require the tunnel to open successfully, else the container will exit so you can be sure your tunnel is up and running before starting to test.\r\n\r\n### BrowserStack\r\nTo open the [BrowserStack][] tunnel while starting the docker container pass in the arguments `-e BSTACK_TUNNEL=true -e BSTACK_ACCESS_KEY=secret` that will also require the tunnel to open successfully, else the container will exit so you can be sure your tunnel is up and running before starting to test.\r\n\r\n## Additional Uses\r\n\r\n### Using Xephyr to redirect X to the docker host\r\nNote the below method gives full access to the docker container to the host machine.\r\n\r\nHost machine, terminal 1:\r\n\r\n    sudo apt-get install xserver-xephyr\r\n    export XE_DISP_NUM=12 SCREEN_WIDTH=2000 SCREEN_HEIGHT=1500\r\n    Xephyr -ac -br -noreset -resizeable \\\r\n        -screen ${SCREEN_WIDTH}x${SCREEN_HEIGHT} :${XE_DISP_NUM}\r\n\r\nHost machine, terminal 2:\r\n\r\n    docker run --rm --name=ch -p=4444:24444 \\\r\n      -v /dev/shm:/dev/shm \\\r\n      -e SCREEN_WIDTH -e SCREEN_HEIGHT -e XE_DISP_NUM \\\r\n      -v /tmp/.X11-unix/X${XE_DISP_NUM}:/tmp/.X11-unix/X${XE_DISP_NUM} \\\r\n      elgalu/selenium:2.53.0o\r\n\r\nNow when you run your tests instead of connecting. If docker run fails try `xhost +`\r\n\r\n### Using free available ports and tunneling to emulate localhost testing\r\nLet's say you need to expose 4 ports (3000, 2525, 4545, 4546) from your laptop but test on the remote docker selenium.\r\nEnter tunneling.\r\n\r\n```sh\r\n# -- Common: Set some handy shortcuts.\r\n# On development machine (target test localhost server)\r\nSOPTS=\"-o StrictHostKeyChecking=no\"\r\nTUNLOCOPTS=\"-v -N $SOPTS -L\"\r\nTUNREVOPTS=\"-v -N $SOPTS -R\"\r\n# port 0 means bind to a free available port\r\nANYPORT=0\r\n\r\n# -- Option 1. docker run - Running docker locally\r\n# Run a selenium instance binding to host random ports\r\nREMOTE_DOCKER_SRV=localhost\r\nCONTAINER=$(docker run -d -p=0.0.0.0:${ANYPORT}:22222 -p=0.0.0.0:${ANYPORT}:24444 \\\r\n    -p=0.0.0.0:${ANYPORT}:25900 -e SCREEN_HEIGHT=1110 -e VNC_PASSWORD=hola \\\r\n    -e SSH_AUTH_KEYS=\"$(cat ~/.ssh/id_rsa.pub)\" elgalu/selenium:2.53.0o\r\n\r\n# -- Option 2.docker run- Running docker on remote docker server like in the cloud\r\n# Useful if the docker server is running in the cloud. Establish free local ports\r\nREMOTE_DOCKER_SRV=some.docker.server.com\r\nssh ${REMOTE_DOCKER_SRV} #get into the remote docker provider somehow\r\n# Note in remote server I'm using authorized_keys instead of id_rsa.pub given\r\n# it acts as a jump host so my public key is already on that server\r\nCONTAINER=$(docker run -d -p=0.0.0.0:${ANYPORT}:22222 -e SCREEN_HEIGHT=1110 \\\r\n    -e VNC_PASSWORD=hola -e SSH_AUTH_KEYS=\"$(cat ~/.ssh/authorized_keys)\" \\\r\n    elgalu/selenium:2.53.0o\r\n\r\n# -- Common: Wait for the container to start\r\n./host-scripts/wait-docker-selenium.sh grid 7s\r\njson_filter='{{(index (index .NetworkSettings.Ports \"22222/tcp\") 0).HostPort}}'\r\nSSHD_PORT=$(docker inspect -f='${json_filter}' $CONTAINER)\r\necho $SSHD_PORT #=> e.g. SSHD_PORT=32769\r\n\r\n# -- Option 1. Obtain dynamic values like container IP and assigned free ports\r\njson_filter='{{(index (index .NetworkSettings.Ports \"24444/tcp\") 0).HostPort}}'\r\nFREE_SELE_PORT=$(docker inspect -f='${json_filter}' $CONTAINER)\r\njson_filter='{{(index (index .NetworkSettings.Ports \"25900/tcp\") 0).HostPort}}'\r\nFREE_VNC_PORT=$(docker inspect -f='${json_filter}' $CONTAINER)\r\n\r\n# -- Option 2. Get some free ports in current local machine. Needs python.\r\n# IMPORTANT: Go back to development machine\r\nFREE_SELE_PORT=$(python -c 'import socket; s=socket.socket(); \\\r\n    s.bind((\"\", 0)); print(s.getsockname()[1]); s.close()')\r\nFREE_VNC_PORT=$(python -c 'import socket; s=socket.socket(); \\\r\n    s.bind((\"\", 0)); print(s.getsockname()[1]); s.close()')\r\n# -- Option 2. Tunneling selenium+vnc is necessary if using a remote docker\r\nssh ${TUNLOCOPTS} localhost:${FREE_SELE_PORT}:localhost:24444 \\\r\n    -p ${SSHD_PORT} application@${REMOTE_DOCKER_SRV} &\r\nLOC_TUN_SELE_PID=$!\r\nssh ${TUNLOCOPTS} localhost:${FREE_VNC_PORT}:localhost:25900 \\\r\n    -p ${SSHD_PORT} application@${REMOTE_DOCKER_SRV} &\r\nLOC_TUN_VNC_PID=$!\r\necho $FREE_SELE_PORT $FREE_VNC_PORT\r\n\r\n# -- Common: Expose local ports so can be tested as 'localhost'\r\n# inside the docker container\r\nssh ${TUNREVOPTS} localhost:3000:localhost:3000 \\\r\n    -p ${SSHD_PORT} application@${REMOTE_DOCKER_SRV} &\r\nREM_TUN1_PID=$!\r\nssh ${TUNREVOPTS} localhost:2525:localhost:2525 \\\r\n    -p ${SSHD_PORT} application@${REMOTE_DOCKER_SRV} &\r\nREM_TUN2_PID=$!\r\nssh ${TUNREVOPTS} localhost:4545:localhost:4545 \\\r\n    -p ${SSHD_PORT} application@${REMOTE_DOCKER_SRV} &\r\nREM_TUN3_PID=$!\r\nssh ${TUNREVOPTS} localhost:4546:localhost:4546 \\\r\n    -p ${SSHD_PORT} application@${REMOTE_DOCKER_SRV} &\r\nREM_TUN4_PID=$!\r\necho Option 1. Should show 4 ports when doing it locally\r\necho Option 2. Should show 6 ports when doing it remotely\r\necho $REM_TUN1_PID $REM_TUN2_PID $REM_TUN3_PID \\\r\n    $REM_TUN4_PID $LOC_TUN_SELE_PID $LOC_TUN_VNC_PID\r\n# Use the container as if selenium and VNC were running locally\r\n# thanks to ssh -L port FWD\r\ngoogle-chrome-stable \\\r\n    \"http://localhost:${FREE_SELE_PORT}/wd/hub/static/resource/hub.html\"\r\nvncv localhost:${FREE_VNC_PORT} -Scaling=70% &\r\n# Stop all the things after your tests are done\r\nkill $REM_TUN1_PID $REM_TUN2_PID $REM_TUN3_PID \\\r\n    $REM_TUN4_PID $LOC_TUN_SELE_PID $LOC_TUN_VNC_PID\r\n# if in Option 2. execute below commands inside docker\r\n# provider machine `ssh ${REMOTE_DOCKER_SRV}`\r\ndocker stop ${CONTAINER}\r\ndocker rm ${CONTAINER}\r\n```\r\n\r\n## Step by step build\r\n\r\n### 1. Build this image\r\n\r\nIf you git clone this repo locally, i.e. cd into where the Dockerfile is, you can:\r\n\r\n    docker build -t=\"elgalu/docker-selenium:local\" .\r\n\r\nIf you prefer to download the final built image from docker you can pull it, personally I always prefer to build them manually except for the base images like Ubuntu 14.04.2:\r\n\r\n    docker pull elgalu/selenium:2.53.0o\r\n\r\n### 2. Use this image\r\n\r\n#### e.g. Spawn a container for Chrome testing:\r\n\r\n    CH=$(docker run --rm --name=CH -p=127.0.0.1::24444 -p=127.0.0.1::25900 \\\r\n        -v /e2e/uploads:/e2e/uploads elgalu/docker-selenium:local)\r\n\r\n*Note:* `-v /e2e/uploads:/e2e/uploads` is optional in case you are testing browser uploads on your WebApp, you'll probably need to share a directory for this.\r\n\r\nThe `127.0.0.1::` part is to avoid binding to all network interfaces, most of the time you don't need to expose the docker container like that so just *localhost* for now.\r\n\r\nI like to remove the containers after each e2e test with `--rm` since this docker container is not meant to preserve state, spawning a new one is less than 3 seconds. You need to think of your docker container as processes, not as running virtual machines in case you are familiar with vagrant.\r\n\r\nA dynamic port will be bound to the container ones, i.e.\r\n\r\n    # Obtain the selenium port you'll connect to:\r\n    docker port $CH 4444\r\n    #=> 127.0.0.1:49155\r\n\r\n    # Obtain the VNC server port in case you want to look around\r\n    docker port $CH 25900\r\n    #=> 127.0.0.1:49160\r\n\r\nIn case you have RealVNC binary `vnc` in your path, you can always take a look, view only to avoid messing around your tests with an unintended mouse click or keyboard.\r\n\r\n    ./bin/vncview.sh 127.0.0.1:49160\r\n\r\n#### e.g. Spawn a container for Firefox testing:\r\n\r\nThis command line is the same as for Chrome, remember that the selenium running container is able to launch either Chrome or Firefox, the idea around having 2 separate containers, one for each browser is for convenience, plus avoid certain `:focus` issues your WebApp may encounter during e2e automation.\r\n\r\n    FF=$(docker run --rm --name=ff -p=127.0.0.1::24444 -p=127.0.0.1::25900 \\\r\n        -v /e2e/uploads:/e2e/uploads elgalu/docker-selenium:local)\r\n\r\n#### How to get docker internal IP through logs\r\n\r\n    CONTAINER_IP=$(docker logs sele10 2>&1 | grep \"Container docker internal IP: \" | sed -e 's/.*IP: //' -e 's/<.*$//')\r\n    echo ${CONTAINER_IP} #=> 172.17.0.34\r\n\r\n#### Look around\r\n\r\n    docker images\r\n    #=>\r\n\r\n    REPOSITORY               TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\r\n    elgalu/docker-selenium   local               eab41ff50f72        About an hour ago   931.1 MB\r\n    ubuntu                   14.04.2             d0955f21bf24        4 weeks ago         188.3 MB\r\n\r\n### DNS\r\n\r\n#### How to share the host DNS\r\n\r\nBy default `docker run` sets the DNS to Google ones *8.8.8.8 and 8.8.4.4* however you may need to use your own.\r\n\r\nFirst attempt is to use `--dns` option, e.g.\r\n\r\n    docker run --dns=1.1.1.1 --dns=1.1.1.2 <args...>\r\n\r\nHowever this may not work for you and simply want to share the same DNS name resolution than the docker host machine, in which case you should use `--net=host` along with `--pid=host`\r\n\r\n    docker run --net=host --pid=host <args...>\r\n\r\nSo `--pid=host` is included to avoid https://github.com/docker/docker/issues/5899 `sudo: unable to send audit message: Operation not permitted`\r\n\r\n## Who is using docker-selenium?\r\n\r\n* [Zalando](https://tech.zalando.com/blog/)\r\n* [Shoov](http://www.gizra.com/content/phantomjs-chrome-docker-selenium-standalone/)\r\n* [smaato](http://blog.smaato.com/automated-end-to-end-testing-with-protractor-docker-jenkins)\r\n* [Algolia](https://github.com/algolia/instantsearch.js/#functional-tests)\r\n* [Nvidia](https://twitter.com/nvidia)\r\n* And many more! Please ping @elgalu to add you here.\r\n\r\n\r\n## Troubleshooting\r\n\r\nAll output is sent to stdout so it can be inspected by running:\r\n\r\n``` bash\r\n$ docker logs -f <container-id|container-name>\r\n```\r\n\r\nPowered by Supervisor, the container leaves many logs;\r\n\r\n    /var/log/cont/docker-selenium-status.log\r\n    /var/log/cont/selenium-hub-stderr.log\r\n    /var/log/cont/selenium-hub-stdout.log\r\n    /var/log/cont/selenium-node-chrome-stderr.log\r\n    /var/log/cont/selenium-node-chrome-stdout.log\r\n    /var/log/cont/selenium-node-firefox-stderr.log\r\n    /var/log/cont/selenium-node-firefox-stdout.log\r\n    /var/log/cont/sshd-stderr.log\r\n    /var/log/cont/sshd-stdout.log\r\n    /var/log/cont/supervisord.log\r\n    /var/log/cont/video-rec-stderr.log\r\n    /var/log/cont/video-rec-stdout.log\r\n    /var/log/cont/vnc-stderr.log\r\n    /var/log/cont/vnc-stdout.log\r\n    /var/log/cont/xmanager-stderr.log\r\n    /var/log/cont/xmanager-stdout.log\r\n    /var/log/cont/xterm-stderr.log\r\n    /var/log/cont/xterm-stdout.log\r\n    /var/log/cont/xvfb-stderr.log\r\n    /var/log/cont/xvfb-stdout.log\r\n\r\n\r\n[2.47.1m]: https://github.com/elgalu/docker-selenium/releases/tag/2.47.1m\r\n[Selenium]: https://github.com/SeleniumHQ/selenium\r\n[sauce]: https://saucelabs.com/selenium/selenium-grid\r\n[BrowserStack]: https://www.browserstack.com/automate\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}